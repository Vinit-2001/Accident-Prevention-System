

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May 31 16:05:40 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text11,local,class=CODE,merge=1,delta=2
    19                           	psect	text12,local,class=CODE,merge=1,delta=2
    20                           	psect	text13,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.41
    24                           ; Generated 25/01/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0040                     _RD0	set	64
   116  0043                     _RD3	set	67
   117  0044                     _RD4	set	68
   118  0042                     _RD2	set	66
   119  0041                     _RD1	set	65
   120  0029                     _RA1	set	41
   121  0028                     _RA0	set	40
   122  0037                     _RB7	set	55
   123  0036                     _RB6	set	54
   124  003F                     _RC7	set	63
   125  003E                     _RC6	set	62
   126  003D                     _RC5	set	61
   127  003C                     _RC4	set	60
   128  003B                     _RC3	set	59
   129  003A                     _RC2	set	58
   130  0039                     _RC1	set	57
   131  0038                     _RC0	set	56
   132  0087                     _TRISC	set	135
   133  0088                     _TRISD	set	136
   134  0086                     _TRISB	set	134
   135  009F                     _ADCON1	set	159
   136  0429                     _TRISA1	set	1065
   137  0428                     _TRISA0	set	1064
   138                           
   139                           	psect	strings
   140  0003                     __pstrings:	
   141  0003                     stringtab:	
   142  0003                     __stringtab:	
   143  0003                     stringcode:	
   144                           ;	String table - string pointers are 1 byte each
   145                           
   146  0003                     stringdir:	
   147  0003  3000               	movlw	high stringdir
   148  0004  008A               	movwf	10
   149  0005  0804               	movf	4,w
   150  0006  0A84               	incf	4,f
   151  0007  0782               	addwf	2,f
   152  0008                     __stringbase:	
   153  0008  3400               	retlw	0
   154  0009                     __end_of__stringtab:	
   155  0009                     STR_1:	
   156  0009  3457               	retlw	87	;'W'
   157  000A  3445               	retlw	69	;'E'
   158  000B  344C               	retlw	76	;'L'
   159  000C  3443               	retlw	67	;'C'
   160  000D  344F               	retlw	79	;'O'
   161  000E  344D               	retlw	77	;'M'
   162  000F  3445               	retlw	69	;'E'
   163  0010  3420               	retlw	32	;' '
   164  0011  3454               	retlw	84	;'T'
   165  0012  344F               	retlw	79	;'O'
   166  0013  3420               	retlw	32	;' '
   167  0014  344D               	retlw	77	;'M'
   168  0015  3449               	retlw	73	;'I'
   169  0016  344E               	retlw	78	;'N'
   170  0017  3449               	retlw	73	;'I'
   171  0018  3420               	retlw	32	;' '
   172  0019  3450               	retlw	80	;'P'
   173  001A  3452               	retlw	82	;'R'
   174  001B  344F               	retlw	79	;'O'
   175  001C  344A               	retlw	74	;'J'
   176  001D  3445               	retlw	69	;'E'
   177  001E  3443               	retlw	67	;'C'
   178  001F  3454               	retlw	84	;'T'
   179  0020  3421               	retlw	33	;'!'
   180  0021  3421               	retlw	33	;'!'
   181  0022  3400               	retlw	0
   182  0023                     STR_4:	
   183  0023  3459               	retlw	89	;'Y'
   184  0024  344F               	retlw	79	;'O'
   185  0025  3455               	retlw	85	;'U'
   186  0026  3420               	retlw	32	;' '
   187  0027  3441               	retlw	65	;'A'
   188  0028  3452               	retlw	82	;'R'
   189  0029  3445               	retlw	69	;'E'
   190  002A  3420               	retlw	32	;' '
   191  002B  3444               	retlw	68	;'D'
   192  002C  3452               	retlw	82	;'R'
   193  002D  3455               	retlw	85	;'U'
   194  002E  344E               	retlw	78	;'N'
   195  002F  344B               	retlw	75	;'K'
   196  0030  3445               	retlw	69	;'E'
   197  0031  344E               	retlw	78	;'N'
   198  0032  3421               	retlw	33	;'!'
   199  0033  3421               	retlw	33	;'!'
   200  0034  3421               	retlw	33	;'!'
   201  0035  3400               	retlw	0
   202  0036                     STR_6:	
   203  0036  3459               	retlw	89	;'Y'
   204  0037  344F               	retlw	79	;'O'
   205  0038  3455               	retlw	85	;'U'
   206  0039  3420               	retlw	32	;' '
   207  003A  344C               	retlw	76	;'L'
   208  003B  344F               	retlw	79	;'O'
   209  003C  344F               	retlw	79	;'O'
   210  003D  344B               	retlw	75	;'K'
   211  003E  3420               	retlw	32	;' '
   212  003F  3444               	retlw	68	;'D'
   213  0040  3452               	retlw	82	;'R'
   214  0041  344F               	retlw	79	;'O'
   215  0042  3457               	retlw	87	;'W'
   216  0043  3453               	retlw	83	;'S'
   217  0044  3459               	retlw	89	;'Y'
   218  0045  3421               	retlw	33	;'!'
   219  0046  3421               	retlw	33	;'!'
   220  0047  3421               	retlw	33	;'!'
   221  0048  3400               	retlw	0
   222  0049                     STR_5:	
   223  0049  3459               	retlw	89	;'Y'
   224  004A  344F               	retlw	79	;'O'
   225  004B  3455               	retlw	85	;'U'
   226  004C  3420               	retlw	32	;' '
   227  004D  3443               	retlw	67	;'C'
   228  004E  3441               	retlw	65	;'A'
   229  004F  344E               	retlw	78	;'N'
   230  0050  3427               	retlw	39	;'''
   231  0051  3454               	retlw	84	;'T'
   232  0052  3420               	retlw	32	;' '
   233  0053  3444               	retlw	68	;'D'
   234  0054  3452               	retlw	82	;'R'
   235  0055  3449               	retlw	73	;'I'
   236  0056  3456               	retlw	86	;'V'
   237  0057  3445               	retlw	69	;'E'
   238  0058  3421               	retlw	33	;'!'
   239  0059  3400               	retlw	0
   240  005A                     STR_3:	
   241  005A  3459               	retlw	89	;'Y'
   242  005B  344F               	retlw	79	;'O'
   243  005C  3455               	retlw	85	;'U'
   244  005D  3420               	retlw	32	;' '
   245  005E  3443               	retlw	67	;'C'
   246  005F  3441               	retlw	65	;'A'
   247  0060  344E               	retlw	78	;'N'
   248  0061  3420               	retlw	32	;' '
   249  0062  3444               	retlw	68	;'D'
   250  0063  3452               	retlw	82	;'R'
   251  0064  3449               	retlw	73	;'I'
   252  0065  3456               	retlw	86	;'V'
   253  0066  3445               	retlw	69	;'E'
   254  0067  3421               	retlw	33	;'!'
   255  0068  3400               	retlw	0
   256  0069                     STR_2:	
   257  0069  3448               	retlw	72	;'H'
   258  006A  3465               	retlw	101	;'e'
   259  006B  346C               	retlw	108	;'l'
   260  006C  346C               	retlw	108	;'l'
   261  006D  346F               	retlw	111	;'o'
   262  006E  3420               	retlw	32	;' '
   263  006F  3455               	retlw	85	;'U'
   264  0070  3453               	retlw	83	;'S'
   265  0071  3445               	retlw	69	;'E'
   266  0072  3452               	retlw	82	;'R'
   267  0073  3421               	retlw	33	;'!'
   268  0074  3421               	retlw	33	;'!'
   269  0075  3400               	retlw	0
   270  0076                     STR_8:	
   271  0076  3457               	retlw	87	;'W'
   272  0077  3441               	retlw	65	;'A'
   273  0078  3452               	retlw	82	;'R'
   274  0079  344E               	retlw	78	;'N'
   275  007A  3449               	retlw	73	;'I'
   276  007B  344E               	retlw	78	;'N'
   277  007C  3447               	retlw	71	;'G'
   278  007D  3421               	retlw	33	;'!'
   279  007E  3421               	retlw	33	;'!'
   280  007F  3421               	retlw	33	;'!'
   281  0080  3400               	retlw	0
   282  0049                     
   283                           	psect	cinit
   284  07FC                     start_initialization:	
   285                           ; #config settings
   286                           
   287  07FC                     __initialization:	
   288  07FC                     end_of_initialization:	
   289                           ;End of C runtime variable initialization code
   290                           
   291  07FC                     __end_of__initialization:	
   292  07FC  0183               	clrf	3
   293  07FD  120A  118A  2EA7   	ljmp	_main	;jump to C main() function
   294                           
   295                           	psect	cstackCOMMON
   296  0070                     __pcstackCOMMON:	
   297  0070                     ?_lcd:	
   298  0070                     ?_motor:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ??_motor:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_lcd_1:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_led:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ??_led:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_buz:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ??_buz:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_Lcd8_Port:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ??_Lcd8_Port:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_Lcd8_Cmd:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_Lcd8_Init:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_Lcd8_Write_Char:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_Lcd8_Write_String:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_Lcd8_Shift_Left:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_main:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_Lcd8_Clear:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     Lcd8_Port@a:	
   347                           ; 2 bytes @ 0x0
   348                           
   349                           
   350                           ; 1 bytes @ 0x0
   351  0070                     	ds	1
   352  0071                     ??_Lcd8_Cmd:	
   353  0071                     ??_Lcd8_Write_Char:	
   354                           ; 1 bytes @ 0x1
   355                           
   356                           
   357                           ; 1 bytes @ 0x1
   358  0071                     	ds	2
   359  0073                     Lcd8_Cmd@a:	
   360  0073                     Lcd8_Write_Char@a:	
   361                           ; 1 bytes @ 0x3
   362                           
   363                           
   364                           ; 1 bytes @ 0x3
   365  0073                     	ds	1
   366  0074                     ??_Lcd8_Clear:	
   367  0074                     ?_Lcd8_Set_Cursor:	
   368                           ; 1 bytes @ 0x4
   369                           
   370  0074                     ??_Lcd8_Init:	
   371                           ; 1 bytes @ 0x4
   372                           
   373  0074                     ??_Lcd8_Write_String:	
   374                           ; 1 bytes @ 0x4
   375                           
   376  0074                     ??_Lcd8_Shift_Left:	
   377                           ; 1 bytes @ 0x4
   378                           
   379  0074                     Lcd8_Set_Cursor@b:	
   380                           ; 1 bytes @ 0x4
   381                           
   382  0074                     Lcd8_Write_String@i:	
   383                           ; 1 bytes @ 0x4
   384                           
   385                           
   386                           ; 2 bytes @ 0x4
   387  0074                     	ds	1
   388  0075                     ??_Lcd8_Set_Cursor:	
   389  0075                     Lcd8_Set_Cursor@a:	
   390                           ; 1 bytes @ 0x5
   391                           
   392                           
   393                           ; 1 bytes @ 0x5
   394  0075                     	ds	1
   395  0076                     Lcd8_Write_String@a:	
   396                           
   397                           ; 1 bytes @ 0x6
   398  0076                     	ds	1
   399  0077                     ??_lcd:	
   400  0077                     ??_lcd_1:	
   401                           ; 1 bytes @ 0x7
   402                           
   403                           
   404                           ; 1 bytes @ 0x7
   405  0077                     	ds	2
   406  0079                     lcd@i:	
   407                           
   408                           ; 2 bytes @ 0x9
   409  0079                     	ds	2
   410  007B                     ??_main:	
   411                           
   412                           ; 1 bytes @ 0xB
   413  007B                     	ds	3
   414                           
   415                           	psect	maintext
   416  06A7                     __pmaintext:	
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 31 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;  i               2    0        int 
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : B00/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   436 ;;      Params:         0       0       0       0       0
   437 ;;      Locals:         0       0       0       0       0
   438 ;;      Temps:          3       0       0       0       0
   439 ;;      Totals:         3       0       0       0       0
   440 ;;Total ram usage:        3 bytes
   441 ;; Hardware stack levels required when called:    4
   442 ;; This function calls:
   443 ;;		_Lcd8_Clear
   444 ;;		_Lcd8_Init
   445 ;;		_Lcd8_Set_Cursor
   446 ;;		_buz
   447 ;;		_lcd
   448 ;;		_lcd_1
   449 ;;		_led
   450 ;;		_motor
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _main
   458  06A7                     _main:	
   459                           
   460                           ;main.c: 33: int i;
   461                           ;main.c: 34: ADCON1 = 0x06;
   462                           
   463                           ;incstack = 0
   464                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   465  06A7  3006               	movlw	6
   466  06A8  1683               	bsf	3,5	;RP0=1, select bank1
   467  06A9  1303               	bcf	3,6	;RP1=0, select bank1
   468  06AA  009F               	movwf	31	;volatile
   469                           
   470                           ;main.c: 36: TRISA0=1;
   471  06AB  1405               	bsf	5,0	;volatile
   472                           
   473                           ;main.c: 37: TRISA1=1;
   474  06AC  1485               	bsf	5,1	;volatile
   475                           
   476                           ;main.c: 38: TRISB = 0x00;
   477  06AD  0186               	clrf	6	;volatile
   478                           
   479                           ;main.c: 40: TRISD = 0x00;
   480  06AE  0188               	clrf	8	;volatile
   481                           
   482                           ;main.c: 41: TRISC = 0x00;
   483  06AF  0187               	clrf	7	;volatile
   484                           
   485                           ;main.c: 42: Lcd8_Init();
   486  06B0  120A  118A  26E9  120A  118A  	fcall	_Lcd8_Init
   487                           
   488                           ;main.c: 43: Lcd8_Set_Cursor(1,1);
   489  06B5  01F4               	clrf	Lcd8_Set_Cursor@b
   490  06B6  0AF4               	incf	Lcd8_Set_Cursor@b,f
   491  06B7  3001               	movlw	1
   492  06B8  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   493                           
   494                           ;main.c: 44: lcd();
   495  06BD  120A  118A  2651  120A  118A  	fcall	_lcd
   496                           
   497                           ;main.c: 45: _delay((unsigned long)((100)*(20000000/4000.0)));
   498  06C2  3003               	movlw	3
   499  06C3  00FD               	movwf	??_main+2
   500  06C4  308A               	movlw	138
   501  06C5  00FC               	movwf	??_main+1
   502  06C6  3055               	movlw	85
   503  06C7  00FB               	movwf	??_main
   504  06C8                     u477:	
   505  06C8  0BFB               	decfsz	??_main,f
   506  06C9  2EC8               	goto	u477
   507  06CA  0BFC               	decfsz	??_main+1,f
   508  06CB  2EC8               	goto	u477
   509  06CC  0BFD               	decfsz	??_main+2,f
   510  06CD  2EC8               	goto	u477
   511  06CE  2ECF               	nop2
   512                           
   513                           ;main.c: 46: Lcd8_Clear();
   514  06CF  120A  118A  2575  120A  118A  	fcall	_Lcd8_Clear
   515                           
   516                           ;main.c: 48: motor();
   517  06D4  120A  118A  262C  120A  118A  	fcall	_motor
   518                           
   519                           ;main.c: 49: lcd_1();
   520  06D9  120A  118A  2735  120A  118A  	fcall	_lcd_1
   521                           
   522                           ;main.c: 50: led();
   523  06DE  120A  118A  2607  120A  118A  	fcall	_led
   524                           
   525                           ;main.c: 51: buz();
   526  06E3  120A  118A  25E4   	fcall	_buz
   527  06E6  120A  118A  2800   	ljmp	start
   528  06E9                     __end_of_main:	
   529                           
   530                           	psect	text1
   531  062C                     __ptext1:	
   532 ;; *************** function _motor *****************
   533 ;; Defined at:
   534 ;;		line 64 in file "main.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;		None
   537 ;; Auto vars:     Size  Location     Type
   538 ;;		None
   539 ;; Return value:  Size  Location     Type
   540 ;;                  1    wreg      void 
   541 ;; Registers used:
   542 ;;		wreg
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   548 ;;      Params:         0       0       0       0       0
   549 ;;      Locals:         0       0       0       0       0
   550 ;;      Temps:          3       0       0       0       0
   551 ;;      Totals:         3       0       0       0       0
   552 ;;Total ram usage:        3 bytes
   553 ;; Hardware stack levels used:    1
   554 ;; This function calls:
   555 ;;		Nothing
   556 ;; This function is called by:
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           
   562                           ;psect for function _motor
   563  062C                     _motor:	
   564                           
   565                           ;main.c: 66: if((RA0||RA1)==0)
   566                           
   567                           ;incstack = 0
   568                           ; Regs used in _motor: [wreg]
   569  062C  1283               	bcf	3,5	;RP0=0, select bank0
   570  062D  1303               	bcf	3,6	;RP1=0, select bank0
   571  062E  1C05               	btfss	5,0	;volatile
   572  062F  1885               	btfsc	5,1	;volatile
   573  0630  2E41               	goto	l159
   574                           
   575                           ;main.c: 68: {
   576                           ;main.c: 69: RD1=1;
   577  0631  1488               	bsf	8,1	;volatile
   578                           
   579                           ;main.c: 70: RD2=0;
   580  0632  1108               	bcf	8,2	;volatile
   581                           
   582                           ;main.c: 71: _delay((unsigned long)((500)*(20000000/4000.0)));
   583  0633  300D               	movlw	13
   584  0634  00F2               	movwf	??_motor+2
   585  0635  30AF               	movlw	175
   586  0636  00F1               	movwf	??_motor+1
   587  0637  30B6               	movlw	182
   588  0638  00F0               	movwf	??_motor
   589  0639                     u487:	
   590  0639  0BF0               	decfsz	??_motor,f
   591  063A  2E39               	goto	u487
   592  063B  0BF1               	decfsz	??_motor+1,f
   593  063C  2E39               	goto	u487
   594  063D  0BF2               	decfsz	??_motor+2,f
   595  063E  2E39               	goto	u487
   596  063F  0000               	nop
   597                           
   598                           ;main.c: 72: }
   599  0640  0008               	return
   600  0641                     l159:	
   601                           
   602                           ;main.c: 73: else
   603                           ;main.c: 74: {
   604                           ;main.c: 75: RD1=0;
   605  0641  1088               	bcf	8,1	;volatile
   606                           
   607                           ;main.c: 76: RD2=0;
   608  0642  1108               	bcf	8,2	;volatile
   609                           
   610                           ;main.c: 77: _delay((unsigned long)((500)*(20000000/4000.0)));
   611  0643  300D               	movlw	13
   612  0644  00F2               	movwf	??_motor+2
   613  0645  30AF               	movlw	175
   614  0646  00F1               	movwf	??_motor+1
   615  0647  30B6               	movlw	182
   616  0648  00F0               	movwf	??_motor
   617  0649                     u497:	
   618  0649  0BF0               	decfsz	??_motor,f
   619  064A  2E49               	goto	u497
   620  064B  0BF1               	decfsz	??_motor+1,f
   621  064C  2E49               	goto	u497
   622  064D  0BF2               	decfsz	??_motor+2,f
   623  064E  2E49               	goto	u497
   624  064F  0000               	nop
   625  0650  0008               	return
   626  0651                     __end_of_motor:	
   627                           
   628                           	psect	text2
   629  0607                     __ptext2:	
   630 ;; *************** function _led *****************
   631 ;; Defined at:
   632 ;;		line 119 in file "main.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;		None
   635 ;; Auto vars:     Size  Location     Type
   636 ;;		None
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   646 ;;      Params:         0       0       0       0       0
   647 ;;      Locals:         0       0       0       0       0
   648 ;;      Temps:          3       0       0       0       0
   649 ;;      Totals:         3       0       0       0       0
   650 ;;Total ram usage:        3 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           
   660                           ;psect for function _led
   661  0607                     _led:	
   662                           
   663                           ;main.c: 121: if((RA0||RA1)==0)
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _led: [wreg]
   667  0607  1283               	bcf	3,5	;RP0=0, select bank0
   668  0608  1303               	bcf	3,6	;RP1=0, select bank0
   669  0609  1C05               	btfss	5,0	;volatile
   670  060A  1885               	btfsc	5,1	;volatile
   671  060B  2E1C               	goto	l173
   672                           
   673                           ;main.c: 123: {
   674                           ;main.c: 124: RD4=0;
   675  060C  1208               	bcf	8,4	;volatile
   676                           
   677                           ;main.c: 125: RD3=1;
   678  060D  1588               	bsf	8,3	;volatile
   679                           
   680                           ;main.c: 126: _delay((unsigned long)((500)*(20000000/4000.0)));
   681  060E  300D               	movlw	13
   682  060F  00F2               	movwf	??_led+2
   683  0610  30AF               	movlw	175
   684  0611  00F1               	movwf	??_led+1
   685  0612  30B6               	movlw	182
   686  0613  00F0               	movwf	??_led
   687  0614                     u507:	
   688  0614  0BF0               	decfsz	??_led,f
   689  0615  2E14               	goto	u507
   690  0616  0BF1               	decfsz	??_led+1,f
   691  0617  2E14               	goto	u507
   692  0618  0BF2               	decfsz	??_led+2,f
   693  0619  2E14               	goto	u507
   694  061A  0000               	nop
   695                           
   696                           ;main.c: 127: }
   697  061B  0008               	return
   698  061C                     l173:	
   699                           
   700                           ;main.c: 128: else
   701                           ;main.c: 129: {
   702                           ;main.c: 130: RD4=1;
   703  061C  1608               	bsf	8,4	;volatile
   704                           
   705                           ;main.c: 131: RD3=0;
   706  061D  1188               	bcf	8,3	;volatile
   707                           
   708                           ;main.c: 132: _delay((unsigned long)((500)*(20000000/4000.0)));
   709  061E  300D               	movlw	13
   710  061F  00F2               	movwf	??_led+2
   711  0620  30AF               	movlw	175
   712  0621  00F1               	movwf	??_led+1
   713  0622  30B6               	movlw	182
   714  0623  00F0               	movwf	??_led
   715  0624                     u517:	
   716  0624  0BF0               	decfsz	??_led,f
   717  0625  2E24               	goto	u517
   718  0626  0BF1               	decfsz	??_led+1,f
   719  0627  2E24               	goto	u517
   720  0628  0BF2               	decfsz	??_led+2,f
   721  0629  2E24               	goto	u517
   722  062A  0000               	nop
   723  062B  0008               	return
   724  062C                     __end_of_led:	
   725                           
   726                           	psect	text3
   727  0735                     __ptext3:	
   728 ;; *************** function _lcd_1 *****************
   729 ;; Defined at:
   730 ;;		line 80 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   744 ;;      Params:         0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0
   746 ;;      Temps:          3       0       0       0       0
   747 ;;      Totals:         3       0       0       0       0
   748 ;;Total ram usage:        3 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    3
   751 ;; This function calls:
   752 ;;		_Lcd8_Clear
   753 ;;		_Lcd8_Set_Cursor
   754 ;;		_Lcd8_Write_String
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function _lcd_1
   762  0735                     _lcd_1:	
   763                           
   764                           ;main.c: 82: if(RA0==0&&RA1==0)
   765                           
   766                           ;incstack = 0
   767                           ; Regs used in _lcd_1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   768  0735  1283               	bcf	3,5	;RP0=0, select bank0
   769  0736  1303               	bcf	3,6	;RP1=0, select bank0
   770  0737  1C05               	btfss	5,0	;volatile
   771  0738  1885               	btfsc	5,1	;volatile
   772  0739  2F69               	goto	l164
   773                           
   774                           ;main.c: 83: {
   775                           ;main.c: 84: Lcd8_Clear();
   776  073A  120A  118A  2575  120A  118A  	fcall	_Lcd8_Clear
   777                           
   778                           ;main.c: 85: Lcd8_Set_Cursor(1,1);
   779  073F  01F4               	clrf	Lcd8_Set_Cursor@b
   780  0740  0AF4               	incf	Lcd8_Set_Cursor@b,f
   781  0741  3001               	movlw	1
   782  0742  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   783                           
   784                           ;main.c: 86: Lcd8_Write_String("Hello USER!!");
   785  0747  3061               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   786  0748  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   787                           
   788                           ;main.c: 87: Lcd8_Set_Cursor(2,1);
   789  074D  01F4               	clrf	Lcd8_Set_Cursor@b
   790  074E  0AF4               	incf	Lcd8_Set_Cursor@b,f
   791  074F  3002               	movlw	2
   792  0750  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   793                           
   794                           ;main.c: 88: Lcd8_Write_String("YOU CAN DRIVE!");
   795  0755  3052               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   796  0756  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   797                           
   798                           ;main.c: 89: _delay((unsigned long)((1000)*(20000000/4000.0)));
   799  075B  301A               	movlw	26
   800  075C  00F9               	movwf	??_lcd_1+2
   801  075D  305E               	movlw	94
   802  075E  00F8               	movwf	??_lcd_1+1
   803  075F  306E               	movlw	110
   804  0760  00F7               	movwf	??_lcd_1
   805  0761                     u527:	
   806  0761  0BF7               	decfsz	??_lcd_1,f
   807  0762  2F61               	goto	u527
   808  0763  0BF8               	decfsz	??_lcd_1+1,f
   809  0764  2F61               	goto	u527
   810  0765  0BF9               	decfsz	??_lcd_1+2,f
   811  0766  2F61               	goto	u527
   812  0767  0000               	nop
   813                           
   814                           ;main.c: 90: }
   815  0768  0008               	return
   816  0769                     l164:	
   817                           
   818                           ;main.c: 91: else if(RA0==1&&RA1==0)
   819  0769  1805               	btfsc	5,0	;volatile
   820  076A  1885               	btfsc	5,1	;volatile
   821  076B  2F9B               	goto	l166
   822                           
   823                           ;main.c: 92: {
   824                           ;main.c: 93: Lcd8_Clear();
   825  076C  120A  118A  2575  120A  118A  	fcall	_Lcd8_Clear
   826                           
   827                           ;main.c: 94: Lcd8_Set_Cursor(1,1);
   828  0771  01F4               	clrf	Lcd8_Set_Cursor@b
   829  0772  0AF4               	incf	Lcd8_Set_Cursor@b,f
   830  0773  3001               	movlw	1
   831  0774  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   832                           
   833                           ;main.c: 95: Lcd8_Write_String("YOU ARE DRUNKEN!!!");
   834  0779  301B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   835  077A  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   836                           
   837                           ;main.c: 96: Lcd8_Set_Cursor(2,1);
   838  077F  01F4               	clrf	Lcd8_Set_Cursor@b
   839  0780  0AF4               	incf	Lcd8_Set_Cursor@b,f
   840  0781  3002               	movlw	2
   841  0782  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   842                           
   843                           ;main.c: 97: Lcd8_Write_String("YOU CAN'T DRIVE!");
   844  0787  3041               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   845  0788  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   846                           
   847                           ;main.c: 98: _delay((unsigned long)((1000)*(20000000/4000.0)));
   848  078D  301A               	movlw	26
   849  078E  00F9               	movwf	??_lcd_1+2
   850  078F  305E               	movlw	94
   851  0790  00F8               	movwf	??_lcd_1+1
   852  0791  306E               	movlw	110
   853  0792  00F7               	movwf	??_lcd_1
   854  0793                     u537:	
   855  0793  0BF7               	decfsz	??_lcd_1,f
   856  0794  2F93               	goto	u537
   857  0795  0BF8               	decfsz	??_lcd_1+1,f
   858  0796  2F93               	goto	u537
   859  0797  0BF9               	decfsz	??_lcd_1+2,f
   860  0798  2F93               	goto	u537
   861  0799  0000               	nop
   862                           
   863                           ;main.c: 99: }
   864  079A  0008               	return
   865  079B                     l166:	
   866                           
   867                           ;main.c: 100: else if(RA0==0&&RA1==1)
   868  079B  1C05               	btfss	5,0	;volatile
   869  079C  1C85               	btfss	5,1	;volatile
   870  079D  2FCD               	goto	l972
   871                           
   872                           ;main.c: 101: {
   873                           ;main.c: 102: Lcd8_Clear();
   874  079E  120A  118A  2575  120A  118A  	fcall	_Lcd8_Clear
   875                           
   876                           ;main.c: 103: Lcd8_Set_Cursor(1,1);
   877  07A3  01F4               	clrf	Lcd8_Set_Cursor@b
   878  07A4  0AF4               	incf	Lcd8_Set_Cursor@b,f
   879  07A5  3001               	movlw	1
   880  07A6  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   881                           
   882                           ;main.c: 104: Lcd8_Write_String("YOU LOOK DROWSY!!!");
   883  07AB  302E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   884  07AC  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   885                           
   886                           ;main.c: 105: Lcd8_Set_Cursor(2,1);
   887  07B1  01F4               	clrf	Lcd8_Set_Cursor@b
   888  07B2  0AF4               	incf	Lcd8_Set_Cursor@b,f
   889  07B3  3002               	movlw	2
   890  07B4  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   891                           
   892                           ;main.c: 106: Lcd8_Write_String("YOU CAN'T DRIVE!");
   893  07B9  3041               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   894  07BA  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   895                           
   896                           ;main.c: 107: _delay((unsigned long)((1000)*(20000000/4000.0)));
   897  07BF  301A               	movlw	26
   898  07C0  00F9               	movwf	??_lcd_1+2
   899  07C1  305E               	movlw	94
   900  07C2  00F8               	movwf	??_lcd_1+1
   901  07C3  306E               	movlw	110
   902  07C4  00F7               	movwf	??_lcd_1
   903  07C5                     u547:	
   904  07C5  0BF7               	decfsz	??_lcd_1,f
   905  07C6  2FC5               	goto	u547
   906  07C7  0BF8               	decfsz	??_lcd_1+1,f
   907  07C8  2FC5               	goto	u547
   908  07C9  0BF9               	decfsz	??_lcd_1+2,f
   909  07CA  2FC5               	goto	u547
   910  07CB  0000               	nop
   911                           
   912                           ;main.c: 108: }
   913  07CC  0008               	return
   914  07CD                     l972:	
   915                           
   916                           ;main.c: 109: else
   917                           ;main.c: 110: {
   918                           ;main.c: 111: Lcd8_Clear();
   919  07CD  120A  118A  2575  120A  118A  	fcall	_Lcd8_Clear
   920                           
   921                           ;main.c: 112: Lcd8_Set_Cursor(1,1);
   922  07D2  01F4               	clrf	Lcd8_Set_Cursor@b
   923  07D3  0AF4               	incf	Lcd8_Set_Cursor@b,f
   924  07D4  3001               	movlw	1
   925  07D5  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   926                           
   927                           ;main.c: 113: Lcd8_Write_String("WARNING!!!");
   928  07DA  306E               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   929  07DB  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   930                           
   931                           ;main.c: 114: Lcd8_Set_Cursor(2,1);
   932  07E0  01F4               	clrf	Lcd8_Set_Cursor@b
   933  07E1  0AF4               	incf	Lcd8_Set_Cursor@b,f
   934  07E2  3002               	movlw	2
   935  07E3  120A  118A  257A  120A  118A  	fcall	_Lcd8_Set_Cursor
   936                           
   937                           ;main.c: 115: Lcd8_Write_String("YOU CAN'T DRIVE!");
   938  07E8  3041               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   939  07E9  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
   940                           
   941                           ;main.c: 116: _delay((unsigned long)((1000)*(20000000/4000.0)));
   942  07EE  301A               	movlw	26
   943  07EF  00F9               	movwf	??_lcd_1+2
   944  07F0  305E               	movlw	94
   945  07F1  00F8               	movwf	??_lcd_1+1
   946  07F2  306E               	movlw	110
   947  07F3  00F7               	movwf	??_lcd_1
   948  07F4                     u557:	
   949  07F4  0BF7               	decfsz	??_lcd_1,f
   950  07F5  2FF4               	goto	u557
   951  07F6  0BF8               	decfsz	??_lcd_1+1,f
   952  07F7  2FF4               	goto	u557
   953  07F8  0BF9               	decfsz	??_lcd_1+2,f
   954  07F9  2FF4               	goto	u557
   955  07FA  0000               	nop
   956  07FB  0008               	return
   957  07FC                     __end_of_lcd_1:	
   958                           
   959                           	psect	text4
   960  057A                     __ptext4:	
   961 ;; *************** function _Lcd8_Set_Cursor *****************
   962 ;; Defined at:
   963 ;;		line 67 in file "lcd.h"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  a               1    wreg     unsigned char 
   966 ;;  b               1    4[COMMON] unsigned char 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  a               1    5[COMMON] unsigned char 
   969 ;; Return value:  Size  Location     Type
   970 ;;                  1    wreg      void 
   971 ;; Registers used:
   972 ;;		wreg, status,2, status,0, pclath, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   978 ;;      Params:         1       0       0       0       0
   979 ;;      Locals:         1       0       0       0       0
   980 ;;      Temps:          0       0       0       0       0
   981 ;;      Totals:         2       0       0       0       0
   982 ;;Total ram usage:        2 bytes
   983 ;; Hardware stack levels used:    1
   984 ;; Hardware stack levels required when called:    2
   985 ;; This function calls:
   986 ;;		_Lcd8_Cmd
   987 ;; This function is called by:
   988 ;;		_main
   989 ;;		_lcd_1
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           
   994                           ;psect for function _Lcd8_Set_Cursor
   995  057A                     _Lcd8_Set_Cursor:	
   996                           
   997                           ;incstack = 0
   998                           ; Regs used in _Lcd8_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   999                           ;Lcd8_Set_Cursor@a stored from wreg
  1000  057A  00F5               	movwf	Lcd8_Set_Cursor@a
  1001                           
  1002                           ;lcd.h: 69: if(a == 1)
  1003  057B  0375               	decf	Lcd8_Set_Cursor@a,w
  1004  057C  1D03               	btfss	3,2
  1005  057D  2D84               	goto	l912
  1006                           
  1007                           ;lcd.h: 70: Lcd8_Cmd(0x80 + b);
  1008  057E  0874               	movf	Lcd8_Set_Cursor@b,w
  1009  057F  3E80               	addlw	128
  1010  0580  120A  118A  258E   	fcall	_Lcd8_Cmd
  1011  0583  0008               	return
  1012  0584                     l912:	
  1013                           
  1014                           ;lcd.h: 71: else if(a == 2)
  1015  0584  3002               	movlw	2
  1016  0585  0675               	xorwf	Lcd8_Set_Cursor@a,w
  1017  0586  1D03               	btfss	3,2
  1018  0587  0008               	return
  1019                           
  1020                           ;lcd.h: 72: Lcd8_Cmd(0xC0 + b);
  1021  0588  0874               	movf	Lcd8_Set_Cursor@b,w
  1022  0589  3EC0               	addlw	192
  1023  058A  120A  118A  258E   	fcall	_Lcd8_Cmd
  1024  058D  0008               	return
  1025  058E                     __end_of_Lcd8_Set_Cursor:	
  1026                           
  1027                           	psect	text5
  1028  0575                     __ptext5:	
  1029 ;; *************** function _Lcd8_Clear *****************
  1030 ;; Defined at:
  1031 ;;		line 62 in file "lcd.h"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  2   82[None  ] int 
  1038 ;; Registers used:
  1039 ;;		wreg, status,2, status,0, pclath, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1045 ;;      Params:         0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0
  1048 ;;      Totals:         0       0       0       0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    2
  1052 ;; This function calls:
  1053 ;;		_Lcd8_Cmd
  1054 ;; This function is called by:
  1055 ;;		_main
  1056 ;;		_lcd_1
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           
  1061                           ;psect for function _Lcd8_Clear
  1062  0575                     _Lcd8_Clear:	
  1063                           
  1064                           ;lcd.h: 64: Lcd8_Cmd(1);
  1065                           
  1066                           ;incstack = 0
  1067                           ; Regs used in _Lcd8_Clear: [wreg+status,2+status,0+pclath+cstack]
  1068  0575  3001               	movlw	1
  1069  0576  120A  118A  258E   	fcall	_Lcd8_Cmd
  1070  0579  0008               	return
  1071  057A                     __end_of_Lcd8_Clear:	
  1072                           
  1073                           	psect	text6
  1074  0651                     __ptext6:	
  1075 ;; *************** function _lcd *****************
  1076 ;; Defined at:
  1077 ;;		line 54 in file "main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  i               2    9[COMMON] int 
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1091 ;;      Params:         0       0       0       0       0
  1092 ;;      Locals:         2       0       0       0       0
  1093 ;;      Temps:          2       0       0       0       0
  1094 ;;      Totals:         4       0       0       0       0
  1095 ;;Total ram usage:        4 bytes
  1096 ;; Hardware stack levels used:    1
  1097 ;; Hardware stack levels required when called:    3
  1098 ;; This function calls:
  1099 ;;		_Lcd8_Shift_Left
  1100 ;;		_Lcd8_Write_String
  1101 ;; This function is called by:
  1102 ;;		_main
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           
  1107                           ;psect for function _lcd
  1108  0651                     _lcd:	
  1109                           
  1110                           ;main.c: 56: Lcd8_Write_String("WELCOME TO MINI PROJECT!!");
  1111                           
  1112                           ;incstack = 0
  1113                           ; Regs used in _lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1114  0651  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1115  0652  120A  118A  25C2  120A  118A  	fcall	_Lcd8_Write_String
  1116                           
  1117                           ;main.c: 57: for(i=0;i<100;i++)
  1118  0657  01F9               	clrf	lcd@i
  1119  0658  01FA               	clrf	lcd@i+1
  1120  0659                     L1:	
  1121  0659  087A               	movf	lcd@i+1,w
  1122  065A  3A80               	xorlw	128
  1123  065B  00FF               	movwf	127
  1124  065C  3080               	movlw	128
  1125  065D  027F               	subwf	127,w
  1126  065E  1D03               	skipz
  1127  065F  2E62               	goto	u395
  1128  0660  3064               	movlw	100
  1129  0661  0279               	subwf	lcd@i,w
  1130  0662                     u395:	
  1131  0662  1803               	btfsc	3,0
  1132  0663  0008               	return
  1133                           
  1134                           ;main.c: 58: {
  1135                           ;main.c: 59: _delay((unsigned long)((5)*(20000000/4000.0)));
  1136  0664  3021               	movlw	33
  1137  0665  00F8               	movwf	??_lcd+1
  1138  0666  3076               	movlw	118
  1139  0667  00F7               	movwf	??_lcd
  1140  0668                     u567:	
  1141  0668  0BF7               	decfsz	??_lcd,f
  1142  0669  2E68               	goto	u567
  1143  066A  0BF8               	decfsz	??_lcd+1,f
  1144  066B  2E68               	goto	u567
  1145  066C  0000               	nop
  1146                           
  1147                           ;main.c: 60: Lcd8_Shift_Left();
  1148  066D  120A  118A  2570  120A  118A  	fcall	_Lcd8_Shift_Left
  1149  0672  3001               	movlw	1
  1150  0673  07F9               	addwf	lcd@i,f
  1151  0674  1803               	skipnc
  1152  0675  0AFA               	incf	lcd@i+1,f
  1153  0676  3000               	movlw	0
  1154  0677  07FA               	addwf	lcd@i+1,f
  1155  0678  2E59               	goto	L1
  1156  0679                     __end_of_lcd:	
  1157                           
  1158                           	psect	text7
  1159  05C2                     __ptext7:	
  1160 ;; *************** function _Lcd8_Write_String *****************
  1161 ;; Defined at:
  1162 ;;		line 102 in file "lcd.h"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  a               1    wreg     PTR unsigned char 
  1165 ;;		 -> STR_9(17), STR_8(11), STR_7(17), STR_6(19), 
  1166 ;;		 -> STR_5(17), STR_4(19), STR_3(15), STR_2(13), 
  1167 ;;		 -> STR_1(26), 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  a               1    6[COMMON] PTR unsigned char 
  1170 ;;		 -> STR_9(17), STR_8(11), STR_7(17), STR_6(19), 
  1171 ;;		 -> STR_5(17), STR_4(19), STR_3(15), STR_2(13), 
  1172 ;;		 -> STR_1(26), 
  1173 ;;  i               2    4[COMMON] int 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1183 ;;      Params:         0       0       0       0       0
  1184 ;;      Locals:         3       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0
  1186 ;;      Totals:         3       0       0       0       0
  1187 ;;Total ram usage:        3 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    2
  1190 ;; This function calls:
  1191 ;;		_Lcd8_Write_Char
  1192 ;; This function is called by:
  1193 ;;		_lcd
  1194 ;;		_lcd_1
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           
  1199                           ;psect for function _Lcd8_Write_String
  1200  05C2                     _Lcd8_Write_String:	
  1201                           
  1202                           ;incstack = 0
  1203                           ; Regs used in _Lcd8_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1204                           ;Lcd8_Write_String@a stored from wreg
  1205  05C2  00F6               	movwf	Lcd8_Write_String@a
  1206                           
  1207                           ;lcd.h: 104: int i;
  1208                           ;lcd.h: 105: for(i=0;a[i]!='\0';i++)
  1209  05C3  01F4               	clrf	Lcd8_Write_String@i
  1210  05C4  01F5               	clrf	Lcd8_Write_String@i+1
  1211  05C5                     l922:	
  1212  05C5  0874               	movf	Lcd8_Write_String@i,w
  1213  05C6  0776               	addwf	Lcd8_Write_String@a,w
  1214  05C7  0084               	movwf	4
  1215  05C8  120A  118A  2003  120A  118A  	fcall	stringdir
  1216  05CD  3A00               	xorlw	0
  1217  05CE  1903               	btfsc	3,2
  1218  05CF  0008               	return
  1219                           
  1220                           ;lcd.h: 106: Lcd8_Write_Char(a[i]);
  1221  05D0  0874               	movf	Lcd8_Write_String@i,w
  1222  05D1  0776               	addwf	Lcd8_Write_String@a,w
  1223  05D2  0084               	movwf	4
  1224  05D3  120A  118A  2003  120A  118A  	fcall	stringdir
  1225  05D8  120A  118A  25A8  120A  118A  	fcall	_Lcd8_Write_Char
  1226  05DD  3001               	movlw	1
  1227  05DE  07F4               	addwf	Lcd8_Write_String@i,f
  1228  05DF  1803               	skipnc
  1229  05E0  0AF5               	incf	Lcd8_Write_String@i+1,f
  1230  05E1  3000               	movlw	0
  1231  05E2  07F5               	addwf	Lcd8_Write_String@i+1,f
  1232  05E3  2DC5               	goto	l922
  1233  05E4                     __end_of_Lcd8_Write_String:	
  1234                           
  1235                           	psect	text8
  1236  05A8                     __ptext8:	
  1237 ;; *************** function _Lcd8_Write_Char *****************
  1238 ;; Defined at:
  1239 ;;		line 93 in file "lcd.h"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  a               1    wreg     unsigned char 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  a               1    3[COMMON] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0, pclath, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1253 ;;      Params:         0       0       0       0       0
  1254 ;;      Locals:         1       0       0       0       0
  1255 ;;      Temps:          2       0       0       0       0
  1256 ;;      Totals:         3       0       0       0       0
  1257 ;;Total ram usage:        3 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    1
  1260 ;; This function calls:
  1261 ;;		_Lcd8_Port
  1262 ;; This function is called by:
  1263 ;;		_Lcd8_Write_String
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function _Lcd8_Write_Char
  1269  05A8                     _Lcd8_Write_Char:	
  1270                           
  1271                           ;incstack = 0
  1272                           ; Regs used in _Lcd8_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1273                           ;Lcd8_Write_Char@a stored from wreg
  1274  05A8  00F3               	movwf	Lcd8_Write_Char@a
  1275                           
  1276                           ;lcd.h: 95: RB6 = 1;
  1277  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  1278  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  1279  05AB  1706               	bsf	6,6	;volatile
  1280                           
  1281                           ;lcd.h: 96: Lcd8_Port(a);
  1282  05AC  0873               	movf	Lcd8_Write_Char@a,w
  1283  05AD  120A  118A  2679  120A  118A  	fcall	_Lcd8_Port
  1284                           
  1285                           ;lcd.h: 97: RB7 = 1;
  1286  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1287  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1288  05B4  1786               	bsf	6,7	;volatile
  1289                           
  1290                           ;lcd.h: 98: _delay((unsigned long)((4)*(20000000/4000.0)));
  1291  05B5  301A               	movlw	26
  1292  05B6  00F2               	movwf	??_Lcd8_Write_Char+1
  1293  05B7  30F8               	movlw	248
  1294  05B8  00F1               	movwf	??_Lcd8_Write_Char
  1295  05B9                     u577:	
  1296  05B9  0BF1               	decfsz	??_Lcd8_Write_Char,f
  1297  05BA  2DB9               	goto	u577
  1298  05BB  0BF2               	decfsz	??_Lcd8_Write_Char+1,f
  1299  05BC  2DB9               	goto	u577
  1300  05BD  0000               	nop
  1301                           
  1302                           ;lcd.h: 99: RB7 = 0;
  1303  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1304  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1305  05C0  1386               	bcf	6,7	;volatile
  1306  05C1  0008               	return
  1307  05C2                     __end_of_Lcd8_Write_Char:	
  1308                           
  1309                           	psect	text9
  1310  0570                     __ptext9:	
  1311 ;; *************** function _Lcd8_Shift_Left *****************
  1312 ;; Defined at:
  1313 ;;		line 114 in file "lcd.h"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;		None
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2, status,0, pclath, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1327 ;;      Params:         0       0       0       0       0
  1328 ;;      Locals:         0       0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0
  1330 ;;      Totals:         0       0       0       0       0
  1331 ;;Total ram usage:        0 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    2
  1334 ;; This function calls:
  1335 ;;		_Lcd8_Cmd
  1336 ;; This function is called by:
  1337 ;;		_lcd
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _Lcd8_Shift_Left
  1343  0570                     _Lcd8_Shift_Left:	
  1344                           
  1345                           ;lcd.h: 116: Lcd8_Cmd(0x18);
  1346                           
  1347                           ;incstack = 0
  1348                           ; Regs used in _Lcd8_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  1349  0570  3018               	movlw	24
  1350  0571  120A  118A  258E   	fcall	_Lcd8_Cmd
  1351  0574  0008               	return
  1352  0575                     __end_of_Lcd8_Shift_Left:	
  1353                           
  1354                           	psect	text10
  1355  05E4                     __ptext10:	
  1356 ;; *************** function _buz *****************
  1357 ;; Defined at:
  1358 ;;		line 136 in file "main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1372 ;;      Params:         0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0
  1374 ;;      Temps:          3       0       0       0       0
  1375 ;;      Totals:         3       0       0       0       0
  1376 ;;Total ram usage:        3 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _buz
  1387  05E4                     _buz:	
  1388                           
  1389                           ;main.c: 138: if((RA0||RA1)==0)
  1390                           
  1391                           ;incstack = 0
  1392                           ; Regs used in _buz: [wreg]
  1393  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1394  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1395  05E6  1C05               	btfss	5,0	;volatile
  1396  05E7  1885               	btfsc	5,1	;volatile
  1397  05E8  2DF8               	goto	l178
  1398                           
  1399                           ;main.c: 140: {
  1400                           ;main.c: 141: RD0=0;
  1401  05E9  1008               	bcf	8,0	;volatile
  1402                           
  1403                           ;main.c: 142: _delay((unsigned long)((500)*(20000000/4000.0)));
  1404  05EA  300D               	movlw	13
  1405  05EB  00F2               	movwf	??_buz+2
  1406  05EC  30AF               	movlw	175
  1407  05ED  00F1               	movwf	??_buz+1
  1408  05EE  30B6               	movlw	182
  1409  05EF  00F0               	movwf	??_buz
  1410  05F0                     u587:	
  1411  05F0  0BF0               	decfsz	??_buz,f
  1412  05F1  2DF0               	goto	u587
  1413  05F2  0BF1               	decfsz	??_buz+1,f
  1414  05F3  2DF0               	goto	u587
  1415  05F4  0BF2               	decfsz	??_buz+2,f
  1416  05F5  2DF0               	goto	u587
  1417  05F6  0000               	nop
  1418                           
  1419                           ;main.c: 143: }
  1420  05F7  0008               	return
  1421  05F8                     l178:	
  1422                           
  1423                           ;main.c: 144: else
  1424                           ;main.c: 145: {
  1425                           ;main.c: 146: RD0=1;
  1426  05F8  1408               	bsf	8,0	;volatile
  1427                           
  1428                           ;main.c: 147: _delay((unsigned long)((500)*(20000000/4000.0)));
  1429  05F9  300D               	movlw	13
  1430  05FA  00F2               	movwf	??_buz+2
  1431  05FB  30AF               	movlw	175
  1432  05FC  00F1               	movwf	??_buz+1
  1433  05FD  30B6               	movlw	182
  1434  05FE  00F0               	movwf	??_buz
  1435  05FF                     u597:	
  1436  05FF  0BF0               	decfsz	??_buz,f
  1437  0600  2DFF               	goto	u597
  1438  0601  0BF1               	decfsz	??_buz+1,f
  1439  0602  2DFF               	goto	u597
  1440  0603  0BF2               	decfsz	??_buz+2,f
  1441  0604  2DFF               	goto	u597
  1442  0605  0000               	nop
  1443  0606  0008               	return
  1444  0607                     __end_of_buz:	
  1445                           
  1446                           	psect	text11
  1447  06E9                     __ptext11:	
  1448 ;; *************** function _Lcd8_Init *****************
  1449 ;; Defined at:
  1450 ;;		line 75 in file "lcd.h"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      void 
  1457 ;; Registers used:
  1458 ;;		wreg, status,2, status,0, pclath, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1464 ;;      Params:         0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0
  1466 ;;      Temps:          2       0       0       0       0
  1467 ;;      Totals:         2       0       0       0       0
  1468 ;;Total ram usage:        2 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    2
  1471 ;; This function calls:
  1472 ;;		_Lcd8_Cmd
  1473 ;;		_Lcd8_Port
  1474 ;; This function is called by:
  1475 ;;		_main
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           
  1480                           ;psect for function _Lcd8_Init
  1481  06E9                     _Lcd8_Init:	
  1482                           
  1483                           ;lcd.h: 77: Lcd8_Port(0x00);
  1484                           
  1485                           ;incstack = 0
  1486                           ; Regs used in _Lcd8_Init: [wreg+status,2+status,0+pclath+cstack]
  1487  06E9  3000               	movlw	0
  1488  06EA  120A  118A  2679  120A  118A  	fcall	_Lcd8_Port
  1489                           
  1490                           ;lcd.h: 78: RB6 = 0;
  1491  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  1492  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  1493  06F1  1306               	bcf	6,6	;volatile
  1494                           
  1495                           ;lcd.h: 79: _delay((unsigned long)((25)*(20000000/4000.0)));
  1496  06F2  30A3               	movlw	163
  1497  06F3  00F5               	movwf	??_Lcd8_Init+1
  1498  06F4  3055               	movlw	85
  1499  06F5  00F4               	movwf	??_Lcd8_Init
  1500  06F6                     u607:	
  1501  06F6  0BF4               	decfsz	??_Lcd8_Init,f
  1502  06F7  2EF6               	goto	u607
  1503  06F8  0BF5               	decfsz	??_Lcd8_Init+1,f
  1504  06F9  2EF6               	goto	u607
  1505                           
  1506                           ;lcd.h: 81: Lcd8_Cmd(0x30);
  1507  06FA  3030               	movlw	48
  1508  06FB  120A  118A  258E  120A  118A  	fcall	_Lcd8_Cmd
  1509                           
  1510                           ;lcd.h: 82: _delay((unsigned long)((5)*(20000000/4000.0)));
  1511  0700  3021               	movlw	33
  1512  0701  00F5               	movwf	??_Lcd8_Init+1
  1513  0702  3076               	movlw	118
  1514  0703  00F4               	movwf	??_Lcd8_Init
  1515  0704                     u617:	
  1516  0704  0BF4               	decfsz	??_Lcd8_Init,f
  1517  0705  2F04               	goto	u617
  1518  0706  0BF5               	decfsz	??_Lcd8_Init+1,f
  1519  0707  2F04               	goto	u617
  1520  0708  0000               	nop
  1521                           
  1522                           ;lcd.h: 83: Lcd8_Cmd(0x30);
  1523  0709  3030               	movlw	48
  1524  070A  120A  118A  258E  120A  118A  	fcall	_Lcd8_Cmd
  1525                           
  1526                           ;lcd.h: 84: _delay((unsigned long)((15)*(20000000/4000.0)));
  1527  070F  3062               	movlw	98
  1528  0710  00F5               	movwf	??_Lcd8_Init+1
  1529  0711  3065               	movlw	101
  1530  0712  00F4               	movwf	??_Lcd8_Init
  1531  0713                     u627:	
  1532  0713  0BF4               	decfsz	??_Lcd8_Init,f
  1533  0714  2F13               	goto	u627
  1534  0715  0BF5               	decfsz	??_Lcd8_Init+1,f
  1535  0716  2F13               	goto	u627
  1536  0717  2F18               	nop2
  1537                           
  1538                           ;lcd.h: 85: Lcd8_Cmd(0x30);
  1539  0718  3030               	movlw	48
  1540  0719  120A  118A  258E  120A  118A  	fcall	_Lcd8_Cmd
  1541                           
  1542                           ;lcd.h: 87: Lcd8_Cmd(0x38);
  1543  071E  3038               	movlw	56
  1544  071F  120A  118A  258E  120A  118A  	fcall	_Lcd8_Cmd
  1545                           
  1546                           ;lcd.h: 88: Lcd8_Cmd(0x0C);
  1547  0724  300C               	movlw	12
  1548  0725  120A  118A  258E  120A  118A  	fcall	_Lcd8_Cmd
  1549                           
  1550                           ;lcd.h: 89: Lcd8_Cmd(0x01);
  1551  072A  3001               	movlw	1
  1552  072B  120A  118A  258E  120A  118A  	fcall	_Lcd8_Cmd
  1553                           
  1554                           ;lcd.h: 90: Lcd8_Cmd(0x06);
  1555  0730  3006               	movlw	6
  1556  0731  120A  118A  258E   	fcall	_Lcd8_Cmd
  1557  0734  0008               	return
  1558  0735                     __end_of_Lcd8_Init:	
  1559                           
  1560                           	psect	text12
  1561  058E                     __ptext12:	
  1562 ;; *************** function _Lcd8_Cmd *****************
  1563 ;; Defined at:
  1564 ;;		line 53 in file "lcd.h"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  a               1    wreg     unsigned char 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  a               1    3[COMMON] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0, pclath, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1578 ;;      Params:         0       0       0       0       0
  1579 ;;      Locals:         1       0       0       0       0
  1580 ;;      Temps:          2       0       0       0       0
  1581 ;;      Totals:         3       0       0       0       0
  1582 ;;Total ram usage:        3 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    1
  1585 ;; This function calls:
  1586 ;;		_Lcd8_Port
  1587 ;; This function is called by:
  1588 ;;		_Lcd8_Clear
  1589 ;;		_Lcd8_Set_Cursor
  1590 ;;		_Lcd8_Init
  1591 ;;		_Lcd8_Shift_Left
  1592 ;;		_Lcd8_Shift_Right
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function _Lcd8_Cmd
  1598  058E                     _Lcd8_Cmd:	
  1599                           
  1600                           ;incstack = 0
  1601                           ; Regs used in _Lcd8_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1602                           ;Lcd8_Cmd@a stored from wreg
  1603  058E  00F3               	movwf	Lcd8_Cmd@a
  1604                           
  1605                           ;lcd.h: 55: RB6 = 0;
  1606  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1607  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1608  0591  1306               	bcf	6,6	;volatile
  1609                           
  1610                           ;lcd.h: 56: Lcd8_Port(a);
  1611  0592  0873               	movf	Lcd8_Cmd@a,w
  1612  0593  120A  118A  2679  120A  118A  	fcall	_Lcd8_Port
  1613                           
  1614                           ;lcd.h: 57: RB7 = 1;
  1615  0598  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0599  1303               	bcf	3,6	;RP1=0, select bank0
  1617  059A  1786               	bsf	6,7	;volatile
  1618                           
  1619                           ;lcd.h: 58: _delay((unsigned long)((5)*(20000000/4000.0)));
  1620  059B  3021               	movlw	33
  1621  059C  00F2               	movwf	??_Lcd8_Cmd+1
  1622  059D  3076               	movlw	118
  1623  059E  00F1               	movwf	??_Lcd8_Cmd
  1624  059F                     u637:	
  1625  059F  0BF1               	decfsz	??_Lcd8_Cmd,f
  1626  05A0  2D9F               	goto	u637
  1627  05A1  0BF2               	decfsz	??_Lcd8_Cmd+1,f
  1628  05A2  2D9F               	goto	u637
  1629  05A3  0000               	nop
  1630                           
  1631                           ;lcd.h: 59: RB7 = 0;
  1632  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1633  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1634  05A6  1386               	bcf	6,7	;volatile
  1635  05A7  0008               	return
  1636  05A8                     __end_of_Lcd8_Cmd:	
  1637                           
  1638                           	psect	text13
  1639  0679                     __ptext13:	
  1640 ;; *************** function _Lcd8_Port *****************
  1641 ;; Defined at:
  1642 ;;		line 11 in file "lcd.h"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  a               1    wreg     unsigned char 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  a               1    0[COMMON] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         0       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0
  1659 ;;      Totals:         1       0       0       0       0
  1660 ;;Total ram usage:        1 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_Lcd8_Cmd
  1666 ;;		_Lcd8_Init
  1667 ;;		_Lcd8_Write_Char
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           
  1672                           ;psect for function _Lcd8_Port
  1673  0679                     _Lcd8_Port:	
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in _Lcd8_Port: [wreg]
  1677                           ;Lcd8_Port@a stored from wreg
  1678  0679  00F0               	movwf	Lcd8_Port@a
  1679                           
  1680                           ;lcd.h: 13: if(a & 1)
  1681  067A  1C70               	btfss	Lcd8_Port@a,0
  1682  067B  2E80               	goto	l61
  1683                           
  1684                           ;lcd.h: 14: RC0 = 1;
  1685  067C  1283               	bcf	3,5	;RP0=0, select bank0
  1686  067D  1303               	bcf	3,6	;RP1=0, select bank0
  1687  067E  1407               	bsf	7,0	;volatile
  1688  067F  2E83               	goto	l62
  1689  0680                     l61:	
  1690                           
  1691                           ;lcd.h: 15: else
  1692                           ;lcd.h: 16: RC0 = 0;
  1693  0680  1283               	bcf	3,5	;RP0=0, select bank0
  1694  0681  1303               	bcf	3,6	;RP1=0, select bank0
  1695  0682  1007               	bcf	7,0	;volatile
  1696  0683                     l62:	
  1697                           
  1698                           ;lcd.h: 18: if(a & 2)
  1699  0683  1CF0               	btfss	Lcd8_Port@a,1
  1700  0684  2E87               	goto	l63
  1701                           
  1702                           ;lcd.h: 19: RC1 = 1;
  1703  0685  1487               	bsf	7,1	;volatile
  1704  0686  2E88               	goto	l64
  1705  0687                     l63:	
  1706                           
  1707                           ;lcd.h: 20: else
  1708                           ;lcd.h: 21: RC1 = 0;
  1709  0687  1087               	bcf	7,1	;volatile
  1710  0688                     l64:	
  1711                           
  1712                           ;lcd.h: 23: if(a & 4)
  1713  0688  1D70               	btfss	Lcd8_Port@a,2
  1714  0689  2E8C               	goto	l65
  1715                           
  1716                           ;lcd.h: 24: RC2 = 1;
  1717  068A  1507               	bsf	7,2	;volatile
  1718  068B  2E8D               	goto	l66
  1719  068C                     l65:	
  1720                           
  1721                           ;lcd.h: 25: else
  1722                           ;lcd.h: 26: RC2 = 0;
  1723  068C  1107               	bcf	7,2	;volatile
  1724  068D                     l66:	
  1725                           
  1726                           ;lcd.h: 28: if(a & 8)
  1727  068D  1DF0               	btfss	Lcd8_Port@a,3
  1728  068E  2E91               	goto	l67
  1729                           
  1730                           ;lcd.h: 29: RC3 = 1;
  1731  068F  1587               	bsf	7,3	;volatile
  1732  0690  2E92               	goto	l68
  1733  0691                     l67:	
  1734                           
  1735                           ;lcd.h: 30: else
  1736                           ;lcd.h: 31: RC3 = 0;
  1737  0691  1187               	bcf	7,3	;volatile
  1738  0692                     l68:	
  1739                           
  1740                           ;lcd.h: 33: if(a & 16)
  1741  0692  1E70               	btfss	Lcd8_Port@a,4
  1742  0693  2E96               	goto	l69
  1743                           
  1744                           ;lcd.h: 34: RC4 = 1;
  1745  0694  1607               	bsf	7,4	;volatile
  1746  0695  2E97               	goto	l70
  1747  0696                     l69:	
  1748                           
  1749                           ;lcd.h: 35: else
  1750                           ;lcd.h: 36: RC4 = 0;
  1751  0696  1207               	bcf	7,4	;volatile
  1752  0697                     l70:	
  1753                           
  1754                           ;lcd.h: 38: if(a & 32)
  1755  0697  1EF0               	btfss	Lcd8_Port@a,5
  1756  0698  2E9B               	goto	l71
  1757                           
  1758                           ;lcd.h: 39: RC5 = 1;
  1759  0699  1687               	bsf	7,5	;volatile
  1760  069A  2E9C               	goto	l72
  1761  069B                     l71:	
  1762                           
  1763                           ;lcd.h: 40: else
  1764                           ;lcd.h: 41: RC5 = 0;
  1765  069B  1287               	bcf	7,5	;volatile
  1766  069C                     l72:	
  1767                           
  1768                           ;lcd.h: 43: if(a & 64)
  1769  069C  1F70               	btfss	Lcd8_Port@a,6
  1770  069D  2EA0               	goto	l73
  1771                           
  1772                           ;lcd.h: 44: RC6 = 1;
  1773  069E  1707               	bsf	7,6	;volatile
  1774  069F  2EA1               	goto	l74
  1775  06A0                     l73:	
  1776                           
  1777                           ;lcd.h: 45: else
  1778                           ;lcd.h: 46: RC6 = 0;
  1779  06A0  1307               	bcf	7,6	;volatile
  1780  06A1                     l74:	
  1781                           
  1782                           ;lcd.h: 48: if(a & 128)
  1783  06A1  1FF0               	btfss	Lcd8_Port@a,7
  1784  06A2  2EA5               	goto	l75
  1785                           
  1786                           ;lcd.h: 49: RC7 = 1;
  1787  06A3  1787               	bsf	7,7	;volatile
  1788  06A4  0008               	return
  1789  06A5                     l75:	
  1790                           
  1791                           ;lcd.h: 50: else
  1792                           ;lcd.h: 51: RC7 = 0;
  1793  06A5  1387               	bcf	7,7	;volatile
  1794  06A6  0008               	return
  1795  06A7                     __end_of_Lcd8_Port:	
  1796  007E                     btemp	set	126	;btemp
  1797  007E                     wtemp0	set	126


Data Sizes:
    Strings     120
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd8_Write_String@a	PTR unsigned char  size(1) Largest target is 26
		 -> STR_9(CODE[17]), STR_8(CODE[11]), STR_7(CODE[17]), STR_6(CODE[19]), 
		 -> STR_5(CODE[17]), STR_4(CODE[19]), STR_3(CODE[15]), STR_2(CODE[13]), 
		 -> STR_1(CODE[26]), 


Critical Paths under _main in COMMON

    _main->_lcd
    _lcd_1->_Lcd8_Write_String
    _Lcd8_Set_Cursor->_Lcd8_Cmd
    _Lcd8_Clear->_Lcd8_Cmd
    _lcd->_Lcd8_Write_String
    _Lcd8_Write_String->_Lcd8_Write_Char
    _Lcd8_Write_Char->_Lcd8_Port
    _Lcd8_Shift_Left->_Lcd8_Cmd
    _Lcd8_Init->_Lcd8_Cmd
    _Lcd8_Cmd->_Lcd8_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3042
                                             11 COMMON     3     3      0
                         _Lcd8_Clear
                          _Lcd8_Init
                    _Lcd8_Set_Cursor
                                _buz
                                _lcd
                              _lcd_1
                                _led
                              _motor
 ---------------------------------------------------------------------------------
 (1) _motor                                                3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _led                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_1                                                3     3      0    1303
                                              7 COMMON     3     3      0
                         _Lcd8_Clear
                    _Lcd8_Set_Cursor
                  _Lcd8_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Set_Cursor                                      2     1      1     700
                                              4 COMMON     2     1      1
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Clear                                           0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _lcd                                                  4     4      0     649
                                              7 COMMON     4     4      0
                    _Lcd8_Shift_Left
                  _Lcd8_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Write_String                                    3     3      0     468
                                              4 COMMON     3     3      0
                    _Lcd8_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd8_Write_Char                                      3     3      0     135
                                              1 COMMON     3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Shift_Left                                      0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _buz                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Init                                            2     2      0     255
                                              4 COMMON     2     2      0
                           _Lcd8_Cmd
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd8_Cmd                                             3     3      0     135
                                              1 COMMON     3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd8_Port                                            1     1      0     120
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd8_Clear
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Init
     _Lcd8_Cmd
       _Lcd8_Port
     _Lcd8_Port
   _Lcd8_Set_Cursor
     _Lcd8_Cmd
       _Lcd8_Port
   _buz
   _lcd
     _Lcd8_Shift_Left
       _Lcd8_Cmd
         _Lcd8_Port
     _Lcd8_Write_String
       _Lcd8_Write_Char
         _Lcd8_Port
   _lcd_1
     _Lcd8_Clear
       _Lcd8_Cmd
         _Lcd8_Port
     _Lcd8_Set_Cursor
       _Lcd8_Cmd
         _Lcd8_Port
     _Lcd8_Write_String
       _Lcd8_Write_Char
         _Lcd8_Port
   _led
   _motor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May 31 16:05:40 2021

                         pc 0002                          l61 0680                          l70 0697  
                        l62 0683                          l71 069B                          l63 0687  
                        l72 069C                          l64 0688                          l73 06A0  
                        l65 068C                          l74 06A1                          l66 068D  
                        l75 06A5                          l67 0691                          l68 0692  
                        l69 0696                          fsr 0004                         l164 0769  
                       l173 061C                         l166 079B                         l159 0641  
                       l178 05F8                         l912 0584                         l922 05C5  
                       l972 07CD                         _RA0 0028                         _RA1 0029  
                       _RC0 0038                         _RC1 0039                         _RC2 003A  
                       _RD0 0040                         _RC3 003B                         _RD1 0041  
                       _RC4 003C                         _RB6 0036                         _RD2 0042  
                       _RC5 003D                         _RB7 0037                         _RD3 0043  
                       _RC6 003E                         _RD4 0044                         _RC7 003F  
                       u507 0614                         u517 0624                         u607 06F6  
                       u527 0761                         u617 0704                         u537 0793  
                       u627 0713                         u395 0662                         u547 07C5  
                       u637 059F                         u557 07F4                         u477 06C8  
                       u567 0668                         u487 0639                         u577 05B9  
                       u497 0649                         u587 05F0                         u597 05FF  
                       _lcd 0651                         _led 0607                         _buz 05E4  
                       fsr0 0004                  _Lcd8_Clear 0575                        ?_lcd 0070  
                      ?_led 0070                        ?_buz 0070                        STR_1 0009  
                      STR_2 0069                        STR_3 005A                        STR_4 0023  
                      STR_5 0049                        STR_6 0036                        STR_7 0049  
                      STR_8 0076                        STR_9 0049                        _main 06A7  
         ??_Lcd8_Set_Cursor 0075                        lcd@i 0079                        btemp 007E  
                      start 0000           ??_Lcd8_Shift_Left 0074                       ??_lcd 0077  
                     ??_led 0070                       ??_buz 0070                       ?_main 0070  
                     _TRISB 0086                       _TRISC 0087                       _TRISD 0088  
                     _lcd_1 0735                       _motor 062C                       pclath 000A  
                     status 0003            __end_of_Lcd8_Cmd 05A8                       wtemp0 007E  
           __initialization 07FC                __end_of_main 06E9          __size_of_Lcd8_Init 004C  
        __size_of_Lcd8_Port 002E           ??_Lcd8_Write_Char 0071                      ??_main 007B  
               ?_Lcd8_Clear 0070                      ?_lcd_1 0070                      _ADCON1 009F  
                    ?_motor 0070                      _TRISA0 0428                      _TRISA1 0429  
         __end_of_Lcd8_Init 0735           __end_of_Lcd8_Port 06A7     __end_of__initialization 07FC  
            __pcstackCOMMON 0070               __end_of_lcd_1 07FC         __size_of_Lcd8_Clear 0005  
             __end_of_motor 0651                   ?_Lcd8_Cmd 0070             _Lcd8_Set_Cursor 057A  
                   ??_lcd_1 0077             _Lcd8_Shift_Left 0570                     ??_motor 0070  
                __pmaintext 06A7            Lcd8_Set_Cursor@a 0075            Lcd8_Set_Cursor@b 0074  
                ??_Lcd8_Cmd 0071                  __stringtab 0003             _Lcd8_Write_Char 05A8  
   __end_of_Lcd8_Set_Cursor 058E                     __ptext1 062C                     __ptext2 0607  
                   __ptext3 0735                     __ptext4 057A                     __ptext5 0575  
                   __ptext6 0651                     __ptext7 05C2                     __ptext8 05A8  
                   __ptext9 0570     __end_of_Lcd8_Shift_Left 0575                __size_of_lcd 0028  
              __size_of_led 0025                __size_of_buz 0023                   Lcd8_Cmd@a 0073  
              ??_Lcd8_Clear 0074        end_of_initialization 07FC          __end_of_Lcd8_Clear 057A  
   __end_of_Lcd8_Write_Char 05C2                   _Lcd8_Init 06E9                   _Lcd8_Port 0679  
          ?_Lcd8_Set_Cursor 0074            ?_Lcd8_Shift_Left 0070         start_initialization 07FC  
         __size_of_Lcd8_Cmd 001A                 __end_of_lcd 0679                 __end_of_led 062C  
               __end_of_buz 0607           _Lcd8_Write_String 05C2          ?_Lcd8_Write_String 0070  
                ?_Lcd8_Init 0070                  ?_Lcd8_Port 0070         ??_Lcd8_Write_String 0074  
                 ___latbits 0002   __end_of_Lcd8_Write_String 05E4            ?_Lcd8_Write_Char 0070  
                 __pstrings 0003              __size_of_lcd_1 00C7              __size_of_motor 0025  
               ??_Lcd8_Init 0074            Lcd8_Write_Char@a 0073                 ??_Lcd8_Port 0070  
               __stringbase 0008                    _Lcd8_Cmd 058E  __size_of_Lcd8_Write_String 0022  
        __end_of__stringtab 0009                    __ptext10 05E4                    __ptext11 06E9  
                  __ptext12 058E                    __ptext13 0679               __size_of_main 0042  
                Lcd8_Port@a 0070    __size_of_Lcd8_Set_Cursor 0014    __size_of_Lcd8_Shift_Left 0005  
                 stringcode 0003          Lcd8_Write_String@a 0076          Lcd8_Write_String@i 0074  
                  stringdir 0003                    stringtab 0003    __size_of_Lcd8_Write_Char 001A  
